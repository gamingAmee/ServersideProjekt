@page "/"

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <div class="justify-content-center">
                <RadzenButton IsBusy="@isBusy" Click=@Refresh Text="Refresh" />
                <RadzenDropDown Placeholder="Pick a time" TValue="string" Data=@TimePick Change="@OnChange" />
            </div>

            <RadzenChart>
                <RadzenLineSeries Data="@TelemetricsList" CategoryProperty="Timestamp" Title="Temperatur" LineType="LineType.Solid" ValueProperty="Temperatur">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>
            </RadzenChart>
            <RadzenChart>
                <RadzenLineSeries Data="@TelemetricsList" CategoryProperty="Timestamp" Title="Humidity" LineType="LineType.Solid" ValueProperty="Humidity">
                    <RadzenMarkers MarkerType="MarkerType.Circle" />
                </RadzenLineSeries>
                @*<RadzenCategoryAxis  FormatString="{0:d} {0:t}"/>*@
            </RadzenChart>
        </div>
    </div>
</div>

@code{
    bool isBusy = false;
    public List<Telemetrics> TelemetricsList { get; set; }

    public List<string> TimePick
    {
        get
        {
            return new List<string> { "All" ,"10 mins", "30 mins", "1 hour" };
        }
    }

    protected override async Task OnInitializedAsync()
    {
        isBusy = true;
        var tempList = await _telemetricsService.GetTelemetricsAsync();
        TelemetricsList = tempList.ToList();
        isBusy = false;
    }

    private async Task Refresh()
    {
        isBusy = true;
        var tempList = await _telemetricsService.GetTelemetricsAsync();
        TelemetricsList = tempList.ToList();
        isBusy = false;
    }

    private async Task OnChange(object value)
    {
        await Refresh();
        List<Telemetrics> templist = new();
        var lastTelemetrics = TelemetricsList.LastOrDefault();
        switch (value)
        {
            case "10 mins":
                foreach (var item in TelemetricsList.Where(t => t.Timestamp >= lastTelemetrics.Timestamp.AddMinutes(-10)).OrderByDescending(t => t.Timestamp))
                {
                    templist.Add(item);
                }
                TelemetricsList = templist;
                break;
            case "30 mins":
                foreach (var item in TelemetricsList.Where(t => t.Timestamp >= lastTelemetrics.Timestamp.AddMinutes(-30)).OrderByDescending(t => t.Timestamp))
                {
                    templist.Add(item);
                }
                TelemetricsList = templist;
                break;
            case "1 hour":
                foreach (var item in TelemetricsList.Where(t => t.Timestamp >= lastTelemetrics.Timestamp.AddMinutes(-60)).OrderByDescending(t => t.Timestamp))
                {
                    templist.Add(item);
                }
                TelemetricsList = templist;
                break;

            default:
                break;
        }
    }
}
